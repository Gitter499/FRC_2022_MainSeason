Trajectory {

    // The trajectory information needed to hit the target with certain constraints

    constructor(theta, speed, time)

        @params
            type        name            description

            <double>    theta           The angle of the determined trajectory [in radians]
            <double>    speed           The speed of the determined trajectory [in meters per second]
            <double>    time            The time in flight of the determined trajectory [in seconds]
        
        @implementation
            // bind params to class instance

    static Trajectory determineAlphaImpact(g, dx, dy, alpha)

        // Calculate the trajectory to hit the target at a given angle alpha

        @params
            type            name            description

            <double>        g               Universal acceleration due to gravity [in meters per second]
            <double>        dx              Distance away from target on XZ plane [in meters]
            <double>        dy              Distance away from target on Y axis [in meters]
            <double>        alpha           Angle of impact on target in degrees [in radians]

        @implementation
            // calculate velocity the final target would need to hit the start point if launched at angle alpha
            /*
                dx = vf cos(alpha) t
                -dy = vf sin(alpha) t + 0.5 g t^2
                ...
                vf = dx / cos(alpha) / sqrt(2 * (-dy - dx tan(alpha)) / g)
            */
            vf = dx / cos(alpha) / sqrt(2 * (-dy - dx * tan(alpha)) / g)

            // derive initial velocity squared using kinematics
            /*
                v^2 * sin(theta)^2 = vf^2 * sin(alpha)^2 - 2 g dy
            */
            vSquared = (vf ** 2) * (sin(alpha) ** 2) - 2 * g * dy

            // determine quadratic polynomial to calculate theta
            /*
                v^2 sin^2(theta) = vSquared
                v = x / cos(theta) / sqrt(2 * (dy - dx tan(theta)) / g)
                ...
                tan^2(theta) (g dx^2) + tan(theta) (2 * vSquared * dx) + (-2 * vSquared * dy) = 0
            */
            qA = g * (dx ** 2)
            qB = 2 * vSquared * dx
            qC = -2 * vSquared * dy
            theta = atan2(-qB + sqrt((qB ** 2) - 4 * qA * qC), 2 * qA)

            // plug in formulas for remaining unknown quantities
            speed = dx / cos(theta) / sqrt(2 * (dy - dx * tan(theta)) / g)
            time = dx / speed / cos(theta)

            return Trajectory(theta, speed, time)

    static Trajectory determinePassThrough(g, dx0, dy0, dx1, dy1)

        // Calculate the trajectory to hit a given target while having passed through a control point

        @params
            type        name            description

            <double>    g               Universal acceleration due to gravity [in meters per second]
            <double>    dx0             Distance away from control point on XZ plane [in meters]
            <double>    dy0             Distance away from control point on Y axis [in meters]
            <double>    dx1             Distance away from target on XZ plane [in meters]
            <double>    dy1             Distance away from target on Y axis [in meters]
        
        @implementation
            // derive theta by using same initial velocity and solving for angle that passes through the control point and target
            /*
                dx0 / cos(theta) / sqrt(2 * (dy0 - dx0 * tan(theta)) / g) = dx1 / cos(theta) / sqrt(2 * (dy1 - dx1 * tan(theta)) / g)
                dx0 * sqrt(dy1 - dx1 * tan(theta)) = dx1 * sqrt(dy0 - dx0 * tan(theta))
                dx0 / dx1 = sqrt(dy0 - dx0 * tan(theta)) / sqrt(dy1 - dx1 * tan(theta))
                u = (dx0 ** 2) / (dx1 ** 2) = (dy0 - dx0 * tan(theta)) / (dy1 - dx1 * tan(theta))
                ...
                tan(theta) = (u * dy1 - dy0) / (u * dx1 - dx0)
            */
            u = (dx0 ** 2) / (dx1 ** 2)
            theta = atan((u * dy1 - dy0) / (u * dx1 - dx0))
            speed = dx1 / cos(theta) / sqrt(2 * (dy1 - dx1 * tan(theta)) / g)
            time = dx1 / speed / cos(theta)

            return Trajectory(theta, speed, time)

}